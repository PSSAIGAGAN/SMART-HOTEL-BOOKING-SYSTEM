import React, { useState } from 'react';
import { Modal, Button, Form } from 'react-bootstrap';
import axios from 'axios';

interface Hotel {
  id?: number; // Optional as it's generated by backend
  name: string;
  location: string;
  managerId: string; // Keep as string for input, convert to number before sending
  amenities: string[];
  imageFile?: File; // For file upload object
  imageUrl?: string; // For the URL returned by the backend
}

interface Props {
  show: boolean;
  onHide: () => void;
  onHotelAdded: () => void; // ⭐ NEW: Callback to refresh the list in Managehotels
}

const HotelManagementModal: React.FC<Props> = ({ show, onHide, onHotelAdded }) => {
  // Initialize with an empty hotel object to start with one row
  const [hotels, setHotels] = useState<Hotel[]>([
    {
      name: '',
      location: '',
      managerId: '',
      amenities: [],
    },
  ]);

  const handleFieldChange = (
    index: number,
    field: keyof Hotel,
    value: string | string[]
  ) => {
    const updatedHotels = [...hotels];
    if (field === 'amenities') {
      updatedHotels[index].amenities = (value as string).split(',').map((item) => item.trim());
    } else {
      (updatedHotels[index] as any)[field] = value;
    }
    setHotels(updatedHotels);
  };

  const handleImageUpload = (index: number, file: File | null) => {
    if (file) {
      const updatedHotels = [...hotels];
      updatedHotels[index].imageFile = file;
      setHotels(updatedHotels);
    }
  };

  const handleAddHotel = () => {
    setHotels([
      ...hotels,
      {
        name: '',
        location: '',
        managerId: '',
        amenities: [],
      },
    ]);
  };

  const handleSaveHotel = async (hotel: Hotel, index: number) => {
    try {
      let finalImageUrl = hotel.imageUrl || ''; // Use existing imageUrl if available

      if (hotel.imageFile) {
        const formData = new FormData();
        formData.append('image', hotel.imageFile);
        // ⭐ Ensure the upload endpoint matches your backend
        const uploadRes = await axios.post('http://localhost:8083/api/hotels/upload', formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
        finalImageUrl = uploadRes.data.url;
      }

      // Convert managerId to number for sending to backend
      const parsedManagerId = hotel.managerId ? parseInt(hotel.managerId, 10) : null;
      if (parsedManagerId === null || isNaN(parsedManagerId)) {
        alert('Manager ID must be a valid number.');
        return; // Prevent saving if managerId is invalid
      }

      const hotelData = {
        name: hotel.name,
        location: hotel.location,
        amenities: hotel.amenities.join(', '), // Join amenities array into a single string
        rating: 0, // Default rating for new hotel (backend sets this too)
        url: finalImageUrl,
        managerId: parsedManagerId, // ⭐ Send managerId as a number
        minPrice: null, // minPrice is handled by backend, so send null or omit
      };

      // ⭐ Ensure the create endpoint matches your backend
      await axios.post('http://localhost:8083/api/hotels/create', hotelData);
      alert('Hotel saved successfully!');
      // Remove the saved hotel row from the modal's state (optional, or clear all)
      const updatedHotels = hotels.filter((_, i) => i !== index);
      setHotels(updatedHotels);

      // If all hotels are saved, or if you want to reset the form for new entries
      if (updatedHotels.length === 0) {
        setHotels([
          {
            name: '',
            location: '',
            managerId: '',
            amenities: [],
          },
        ]);
      }
      onHotelAdded(); // Notify parent component to refresh the list
      onHide(); // Close the modal
    } catch (error: any) {
      console.error('Error saving hotel:', error);
      if (axios.isAxiosError(error) && error.response) {
        // Handle specific backend validation errors
        if (error.response.status === 400 && error.response.data.message) {
          alert(`Validation Error: ${error.response.data.message}`);
        } else {
          alert(`Failed to save hotel: ${error.response.data || error.message}`);
        }
      } else {
        alert('Failed to save hotel. Check console for details.');
      }
    }
  };

  return (
    <Modal show={show} onHide={onHide} size="lg">
      <Modal.Header closeButton>
        <Modal.Title>Manage Hotels</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <table className="table table-bordered">
          <thead>
            <tr>
              <th>Name</th>
              <th>Location</th>
              <th>Manager ID</th>
              <th>Amenities</th>
              <th>Image</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {hotels.map((hotel, index) => (
              <tr key={index}>
                <td>
                  <Form.Control
                    type="text"
                    value={hotel.name}
                    onChange={(e) => handleFieldChange(index, 'name', e.target.value)}
                  />
                </td>
                <td>
                  <Form.Control
                    type="text"
                    value={hotel.location}
                    onChange={(e) => handleFieldChange(index, 'location', e.target.value)}
                  />
                </td>
                <td>
                  <Form.Control
                    type="text" // Keep as text to allow empty input initially
                    value={hotel.managerId}
                    onChange={(e) => handleFieldChange(index, 'managerId', e.target.value)}
                    placeholder="Enter Manager ID"
                  />
                </td>
                <td>
                  <Form.Control
                    type="text"
                    value={hotel.amenities.join(', ')}
                    onChange={(e) => handleFieldChange(index, 'amenities', e.target.value)}
                    placeholder="e.g., Pool, WiFi, Gym"
                  />
                </td>
                <td>
                  <Form.Control
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleImageUpload(index, e.target.files?.[0] || null)}
                  />
                  {hotel.imageUrl && (
                    <img src={hotel.imageUrl} alt="preview" style={{ maxWidth: '50px', maxHeight: '50px', marginTop: '5px' }} />
                  )}
                </td>
                <td>
                  <Button variant="success" onClick={() => handleSaveHotel(hotel, index)}>
                    Save
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        <div className="d-flex justify-content-between">
          <Button variant="dark" onClick={handleAddHotel}>
            Add Hotel
          </Button>
        </div>
      </Modal.Body>
    </Modal>
  );
};
 
export default HotelManagementModal;